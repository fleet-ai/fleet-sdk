{
  "problems": [
    {
      "id": "give-me-more-tasks",
      "problem": "In the engineering project, can you move all the bugs to sprint 3, assign the data pipeline bug to me, and assign all the other bugs to Raj?",
      "category": "task_assignment_and_ownership",
      "difficulty": "hard",
      "verifier_func": "async def validate_give_me_more_tasks(\n    before: DatabaseSnapshot,\n    after: DatabaseSnapshot,\n    transcript: str | None = None,\n) -> int:\n    \"\"\"Validate that bugs are moved to sprint 3 and assigned correctly\"\"\"\n    # Get user IDs\n    raj_user = after.table(\"users\").eq(\"name\", \"Raj Patel\").first()\n    sarah_kim_user = after.table(\"users\").eq(\"name\", \"Sarah Kim\").first()\n\n    if not raj_user:\n        raise AssertionError(\"User 'Raj Patel' not found\")\n    if not sarah_kim_user:\n        raise AssertionError(\"User 'Sarah Kim' not found\")\n\n    raj_id = raj_user[\"id\"]\n    sarah_kim_id = sarah_kim_user[\"id\"]\n\n    # Verify SCRUM-555 (data pipeline bug) is assigned to Sarah Kim\n    after.table(\"issues\").eq(\"id\", \"SCRUM-555\").assert_eq(\"owner\", sarah_kim_id)\n\n    # Verify other bugs are assigned to Sarah Kim\n    other_bugs = [\n        \"SCRUM-780\",\n        \"SCRUM-781\",\n        \"SCRUM-790\",\n        \"SCRUM-822\",\n        \"SCRUM-882\",\n        \"SCRUM-897\",\n        \"SCRUM-956\",\n        \"SCRUM-1331\",\n        \"SCRUM-1312\",\n        \"SCRUM-1210\",\n        \"SCRUM-1230\",\n        \"SCRUM-1282\",\n    ]\n    for bug_id in other_bugs:\n        after.table(\"issues\").eq(\"id\", bug_id).assert_eq(\"owner\", raj_id)\n\n    # Verify all bugs are in sprint_3\n    all_bugs = [\"SCRUM-555\"] + other_bugs\n    for bug_id in all_bugs:\n        after.table(\"sprint_issues\").eq(\"issue_id\", bug_id).assert_eq(\n            \"sprint_id\", \"sprint_3\"\n        )\n\n    # Configure ignore settings\n    ignore_config = IgnoreConfig(\n        tables={\"activities\", \"pageviews\", \"sprint_issues\"},\n        table_fields={\n            \"issues\": {\"updated_at\", \"created_at\", \"rowid\"},\n            \"users\": {\"updated_at\", \"created_at\", \"rowid\"},\n            \"sprint_issues\": {\"updated_at\", \"created_at\", \"rowid\"},\n        },\n    )\n\n    # Build expected changes\n    expected_changes = []\n\n    # Assignment changes\n    expected_changes.append(\n        {\n            \"table\": \"issues\",\n            \"pk\": \"SCRUM-555\",\n            \"field\": \"owner\",\n            \"after\": sarah_kim_id,\n        }\n    )\n\n    for bug_id in other_bugs:\n        expected_changes.append(\n            {\n                \"table\": \"issues\",\n                \"pk\": bug_id,\n                \"field\": \"owner\",\n                \"after\": raj_id,\n            }\n        )\n\n    # Sprint changes\n    for bug_id in all_bugs:\n        # Remove from previous sprint\n        before_assignment = before.table(\"sprint_issues\").eq(\"issue_id\", bug_id).first()\n        if before_assignment:\n            old_sprint = before_assignment.get(\"sprint_id\")\n            expected_changes.append(\n                {\n                    \"table\": \"sprint_issues\",\n                    \"pk\": (old_sprint, bug_id),\n                    \"field\": None,\n                    \"after\": \"__removed__\",\n                }\n            )\n\n        # Add to sprint_3\n        expected_changes.append(\n            {\n                \"table\": \"sprint_issues\",\n                \"pk\": (\"sprint_3\", bug_id),\n                \"field\": None,\n                \"after\": \"__added__\",\n            }\n        )\n\n    # Enforce invariant\n    before.diff(after, ignore_config).expect_only(expected_changes)\n\n    return TASK_SUCCESSFUL_SCORE"
    },
    {
      "id": "convert-to-exponential-story-points",
      "problem": "We're converting into a new system where we're now measuring story points in exponentials (1, 2, 4, 8, 16, etc). Can you round all of my active, planned, and backlogged issues to the nearest exponential story point, rounding up if equidistant, in platform eng?",
      "category": "other",
      "difficulty": "hard",
      "verifier_func": "async def validate_convert_to_exponential_story_points(\n    before: DatabaseSnapshot,\n    after: DatabaseSnapshot,\n    transcript: str | None = None,\n) -> int:\n    \"\"\"Validate conversion of story points to exponential values (1, 2, 4, 8, 16, etc)\"\"\"\n\n    def is_exponential_of_2(n):\n        \"\"\"Check if n is a power of 2 (1, 2, 4, 8, 16, ...)\"\"\"\n        if n <= 0:\n            return False\n        return (n & (n - 1)) == 0\n\n    def next_exponential(n):\n        \"\"\"Round to nearest exponential (power of 2), rounding up when equidistant\"\"\"\n        if n <= 0:\n            return 1\n        if is_exponential_of_2(n):\n            return n\n\n        # Find the two surrounding powers of 2\n        lower_power = 1\n        while lower_power < n:\n            lower_power *= 2\n        upper_power = lower_power\n        lower_power //= 2\n\n        # Calculate distances to both powers\n        distance_to_lower = n - lower_power\n        distance_to_upper = upper_power - n\n\n        # Round to nearest, with tie-breaking towards higher value\n        if distance_to_lower < distance_to_upper:\n            return lower_power\n        else:  # distance_to_lower >= distance_to_upper (includes equidistant case)\n            return upper_power\n\n    # Get user ID for Sarah Kim\n    sarah_kim_user = after.table(\"users\").eq(\"name\", \"Sarah Kim\").first()\n    if not sarah_kim_user:\n        raise AssertionError(\"User 'Sarah Kim' not found\")\n\n    sarah_kim_id = sarah_kim_user[\"id\"]\n\n    # Get issues that should have been converted (only for Sarah Kim)\n    issues_with_points = (\n        after.table(\"issues\")\n        .neq(\"issue_type\", \"Epic\")\n        .neq(\"issue_type\", \"Subtask\")\n        .eq(\"project_key\", \"SCRUM\")\n        .eq(\"owner\", sarah_kim_id)\n        .not_null(\"story_points\")\n        .all()\n    )\n\n    expected_changes = []\n    conversion_count = 0\n\n    for issue in issues_with_points:\n        issue_id = issue.get(\"id\")\n        new_points = issue.get(\"story_points\")\n\n        # Get original story points from before snapshot\n        original_issue = before.table(\"issues\").eq(\"id\", issue_id).first()\n        if not original_issue:\n            continue  # Skip new issues\n\n        original_points = original_issue.get(\"story_points\")\n        if original_points is None:\n            continue  # Skip issues that didn't have points originally\n\n        # Verify the conversion is correct\n        expected_points = next_exponential(original_points)\n\n        if new_points != expected_points:\n            raise AssertionError(\n                f\"Issue {issue_id}: Expected story points {expected_points} \"\n                f\"(rounded up from {original_points}), got {new_points}\"\n            )\n\n        # Verify it's an exponential value\n        if not is_exponential_of_2(new_points):\n            raise AssertionError(\n                f\"Issue {issue_id}: Story points {new_points} is not an exponential value\"\n            )\n\n        # Only track as a change if the value actually changed\n        if original_points != new_points:\n            expected_changes.append(\n                {\n                    \"table\": \"issues\",\n                    \"pk\": issue_id,\n                    \"field\": \"story_points\",\n                    \"after\": new_points,\n                }\n            )\n            conversion_count += 1\n\n    if conversion_count == 0:\n        raise AssertionError(\n            \"No story points were converted - expected at least some conversions\"\n        )\n\n    # Configure ignore settings\n    ignore_config = IgnoreConfig(\n        tables={\"activities\", \"pageviews\"},\n        table_fields={\n            \"issues\": {\"updated_at\", \"created_at\", \"rowid\"},\n        },\n    )\n\n    # Verify only story points changed\n    before.diff(after, ignore_config).expect_only(expected_changes)\n\n    return TASK_SUCCESSFUL_SCORE"
    }
  ]
}