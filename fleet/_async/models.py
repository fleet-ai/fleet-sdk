# generated by datamodel-codegen:
#   filename:  http://0.0.0.0:8000/openapi.json
#   timestamp: 2025-07-20T02:00:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, conint


class Environment(BaseModel):
    env_key: str = Field(..., title="Env Key")
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(..., title="Description")
    default_version: Optional[str] = Field(..., title="Default Version")
    versions: Dict[str, str] = Field(..., title="Versions")


class Instance(BaseModel):
    instance_id: str = Field(..., title="Instance Id")
    env_key: str = Field(..., title="Env Key")
    version: str = Field(..., title="Version")
    status: str = Field(..., title="Status")
    subdomain: str = Field(..., title="Subdomain")
    created_at: str = Field(..., title="Created At")
    updated_at: str = Field(..., title="Updated At")
    terminated_at: Optional[str] = Field(None, title="Terminated At")
    team_id: str = Field(..., title="Team Id")
    region: str = Field(..., title="Region")


class InstanceRequest(BaseModel):
    env_key: str = Field(..., title="Env Key")
    version: Optional[str] = Field(None, title="Version")
    region: Optional[str] = Field("us-east-2", title="Region")
    seed: Optional[int] = Field(None, title="Seed")
    timestamp: Optional[int] = Field(None, title="Timestamp")
    p_error: Optional[float] = Field(None, title="P Error")
    avg_latency: Optional[float] = Field(None, title="Avg Latency")
    run_id: Optional[str] = Field(None, title="Run Id")
    task_id: Optional[str] = Field(None, title="Task Id")


class InstanceStatus(Enum):
    pending = "pending"
    running = "running"
    stopped = "stopped"
    error = "error"


class ManagerURLs(BaseModel):
    api: str = Field(..., title="Api")
    docs: str = Field(..., title="Docs")
    reset: str = Field(..., title="Reset")
    diff: str = Field(..., title="Diff")
    snapshot: str = Field(..., title="Snapshot")
    execute_verifier_function: str = Field(..., title="Execute Verifier Function")
    execute_verifier_function_with_upload: str = Field(
        ..., title="Execute Verifier Function With Upload"
    )


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class VerifiersCheckResponse(BaseModel):
    stub: Optional[str] = Field(
        None, description="Name of the function stub", title="Stub"
    )
    version: Optional[int] = Field(
        None, description="Version of the verifier artifact", title="Version"
    )
    display_src: Optional[str] = Field(
        None, description="Display source code of the verifier", title="Display Src"
    )
    created_at: Optional[str] = Field(
        None, description="Creation timestamp", title="Created At"
    )
    created_by: Optional[str] = Field(
        None, description="Creator of the verifier", title="Created By"
    )
    comment: Optional[str] = Field(
        None, description="Comment about the verifier", title="Comment"
    )
    success: bool = Field(
        ..., description="Whether the verification was successful", title="Success"
    )


class VerificationRequest(BaseModel):
    stub: str = Field(..., description="Name of the function stub", title="Stub")
    function_name: Optional[str] = Field(
        "verify", description="Name of the function to execute", title="Function Name"
    )
    region: Optional[str] = Field(
        "us-east-1", description="AWS region for execution", title="Region"
    )
    timeout: Optional[conint(ge=1, le=300)] = Field(
        30, description="Execution timeout in seconds", title="Timeout"
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional metadata to pass to the function as global variables",
        title="Metadata",
    )


class VerificationResponse(BaseModel):
    success: bool = Field(
        ..., description="Whether the verification was successful", title="Success"
    )
    result: Optional[Any] = Field(
        None, description="The return value of the function", title="Result"
    )
    error: Optional[Dict[str, Any]] = Field(
        None, description="Error details if verification failed", title="Error"
    )
    execution_time_ms: int = Field(
        ..., description="Execution time in milliseconds", title="Execution Time Ms"
    )
    bundle_cache_hit: Optional[bool] = Field(
        False,
        description="Whether the bundle was already cached",
        title="Bundle Cache Hit",
    )
    meta: Dict[str, Any] = Field(
        ..., description="Metadata about the execution", title="Meta"
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class InstanceURLs(BaseModel):
    root: str = Field(..., title="Root")
    app: str = Field(..., title="App")
    api: Optional[str] = Field(None, title="Api")
    health: Optional[str] = Field(None, title="Health")
    api_docs: Optional[str] = Field(None, title="Api Docs")
    manager: ManagerURLs


class InstanceResponse(BaseModel):
    instance_id: str = Field(..., title="Instance Id")
    env_key: str = Field(..., title="Env Key")
    version: str = Field(..., title="Version")
    status: str = Field(..., title="Status")
    subdomain: str = Field(..., title="Subdomain")
    created_at: str = Field(..., title="Created At")
    updated_at: str = Field(..., title="Updated At")
    terminated_at: Optional[str] = Field(None, title="Terminated At")
    team_id: str = Field(..., title="Team Id")
    region: str = Field(..., title="Region")
    urls: InstanceURLs
    health: Optional[bool] = Field(None, title="Health")


class InstanceRecord(BaseModel):
    instance_id: str
    env_key: str
    version: str
    status: str
    subdomain: str
    created_at: str
    updated_at: str
    terminated_at: Optional[str] = None
    team_id: str
    region: str
